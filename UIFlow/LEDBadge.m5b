{"category":"LEDBadge","color":"#ff0000","blocks":["__LEDBadge_init","__LEDBadge_clear","__LEDBadge_close","__LEDBadge_NORA","__LEDBadge_GOOD","__LEDBadge_ONAIR"],"jscode":"// Block __LEDBadge_init\nvar __LEDBadge_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"init\"\n        }\n    ],\n    \"colour\": \"#ff0000\"\n};\n\nwindow['Blockly'].Blocks['__LEDBadge_init'] = {\n    init: function() {\n        this.jsonInit(__LEDBadge_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__LEDBadge_init'] = function(block) {\n        return `from machine import I2C\n_HT16K33_BLINK_CMD = const(0x80)\n_HT16K33_BLINK_DISPLAYON = const(0x01)\n_HT16K33_CMD_BRIGHTNESS = const(0xE0)\n_HT16K33_OSCILATOR_ON = const(0x21)\nclass HT16K33:\n    def __init__(self, i2c, address):\n        self.i2c = i2c\n        self.address = address\n        self._temp = bytearray(1)\n        self.buffer = bytearray(16)\n        self._write_cmd(_HT16K33_OSCILATOR_ON)\n        self.blink_rate(0)\n        self.brightness(1)\n    def _write_cmd(self, byte):\n        self._temp[0] = byte\n        self.i2c.writeto(self.address, self._temp)\n    def blink_rate(self, rate=None): # 1-3:fast-slow\n        if rate is None:\n            return self._blink_rate\n        rate = rate & 0x03\n        self._blink_rate = rate\n        self._write_cmd(_HT16K33_BLINK_CMD |\n                        _HT16K33_BLINK_DISPLAYON | rate << 1)\n    def brightness(self, brightness):\n        if brightness is None:\n            return self._brightness\n        brightness = brightness & 0x0F\n        self._brightness = brightness\n        self._write_cmd(_HT16K33_CMD_BRIGHTNESS | brightness)\n    def show(self):\n        self.i2c.writeto_mem(self.address, 0x00, self.buffer)\n    def fill(self, color):\n        fill = 0xff if color else 0x00\n        for i in range(16):\n            self.buffer[i] = fill\n    def _pixel(self, x, y, color=None):\n        addr = 2 * y + x // 8\n        mask = 1 << x % 8\n        if color is None:\n            return bool(self.buffer[addr] & mask)\n        if color:\n            self.buffer[addr] |= mask\n        else:\n            self.buffer[addr] &= ~mask\n        return None` + \"\\n\";\n};\n\n// Block __LEDBadge_clear\nvar __LEDBadge_clear_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"clear\"\n        }\n    ],\n    \"colour\": \"#ff0000\"\n};\n\nwindow['Blockly'].Blocks['__LEDBadge_clear'] = {\n    init: function() {\n        this.jsonInit(__LEDBadge_clear_json);\n    }\n};\n\nwindow['Blockly'].Python['__LEDBadge_clear'] = function(block) {\n        return `i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\nmatrix.fill(0)\nmatrix1.fill(0)\nmatrix.show()\nmatrix1.show()` + \"\\n\";\n};\n\n// Block __LEDBadge_close\nvar __LEDBadge_close_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"close\"\n        }\n    ],\n    \"colour\": \"#ff0000\"\n};\n\nwindow['Blockly'].Blocks['__LEDBadge_close'] = {\n    init: function() {\n        this.jsonInit(__LEDBadge_close_json);\n    }\n};\n\nwindow['Blockly'].Python['__LEDBadge_close'] = function(block) {\n        return `i2c.deinit()` + \"\\n\";\n};\n\n// Block __LEDBadge_NORA\nvar __LEDBadge_NORA_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"NORA\"\n        }\n    ],\n    \"colour\": \"#ff0000\"\n};\n\nwindow['Blockly'].Blocks['__LEDBadge_NORA'] = {\n    init: function() {\n        this.jsonInit(__LEDBadge_NORA_json);\n    }\n};\n\nwindow['Blockly'].Python['__LEDBadge_NORA'] = function(block) {\n        return `i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata1 = [\n  [1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0],\n  [1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,0],\n  [1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data1[y][x]))\n    matrix1._pixel(x,y,int(data1[y][x+16]))\nmatrix.show()\nmatrix1.show()` + \"\\n\";\n};\n\n// Block __LEDBadge_GOOD\nvar __LEDBadge_GOOD_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"GOOD\"\n        }\n    ],\n    \"colour\": \"#ff0000\"\n};\n\nwindow['Blockly'].Blocks['__LEDBadge_GOOD'] = {\n    init: function() {\n        this.jsonInit(__LEDBadge_GOOD_json);\n    }\n};\n\nwindow['Blockly'].Python['__LEDBadge_GOOD'] = function(block) {\n        return `i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata = [\n  [0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [1,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data[y][x]))\n    matrix1._pixel(x,y,int(data[y][x+16]))\nmatrix.show()\nmatrix1.show()` + \"\\n\";\n};\n\n// Block __LEDBadge_ONAIR\nvar __LEDBadge_ONAIR_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"ONAIR\"\n        }\n    ],\n    \"colour\": \"#ff0000\"\n};\n\nwindow['Blockly'].Blocks['__LEDBadge_ONAIR'] = {\n    init: function() {\n        this.jsonInit(__LEDBadge_ONAIR_json);\n    }\n};\n\nwindow['Blockly'].Python['__LEDBadge_ONAIR'] = function(block) {\n        return `i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata2 = [\n  [0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,1,0],\n  [1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0],\n  [1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data2[y][x]))\n    matrix1._pixel(x,y,int(data2[y][x+16]))\nmatrix.show()\nmatrix1.show()` + \"\\n\";\n};\n\n","code":{"init":["window['Blockly'].Python['__LEDBadge_init'] = function(block) {\n        return `from machine import I2C\n_HT16K33_BLINK_CMD = const(0x80)\n_HT16K33_BLINK_DISPLAYON = const(0x01)\n_HT16K33_CMD_BRIGHTNESS = const(0xE0)\n_HT16K33_OSCILATOR_ON = const(0x21)\nclass HT16K33:\n    def __init__(self, i2c, address):\n        self.i2c = i2c\n        self.address = address\n        self._temp = bytearray(1)\n        self.buffer = bytearray(16)\n        self._write_cmd(_HT16K33_OSCILATOR_ON)\n        self.blink_rate(0)\n        self.brightness(1)\n    def _write_cmd(self, byte):\n        self._temp[0] = byte\n        self.i2c.writeto(self.address, self._temp)\n    def blink_rate(self, rate=None): # 1-3:fast-slow\n        if rate is None:\n            return self._blink_rate\n        rate = rate & 0x03\n        self._blink_rate = rate\n        self._write_cmd(_HT16K33_BLINK_CMD |\n                        _HT16K33_BLINK_DISPLAYON | rate << 1)\n    def brightness(self, brightness):\n        if brightness is None:\n            return self._brightness\n        brightness = brightness & 0x0F\n        self._brightness = brightness\n        self._write_cmd(_HT16K33_CMD_BRIGHTNESS | brightness)\n    def show(self):\n        self.i2c.writeto_mem(self.address, 0x00, self.buffer)\n    def fill(self, color):\n        fill = 0xff if color else 0x00\n        for i in range(16):\n            self.buffer[i] = fill\n    def _pixel(self, x, y, color=None):\n        addr = 2 * y + x // 8\n        mask = 1 << x % 8\n        if color is None:\n            return bool(self.buffer[addr] & mask)\n        if color:\n            self.buffer[addr] |= mask\n        else:\n            self.buffer[addr] &= ~mask\n        return None` + \"\\n\";\n};\n\n","from machine import I2C\n_HT16K33_BLINK_CMD = const(0x80)\n_HT16K33_BLINK_DISPLAYON = const(0x01)\n_HT16K33_CMD_BRIGHTNESS = const(0xE0)\n_HT16K33_OSCILATOR_ON = const(0x21)\nclass HT16K33:\n    def __init__(self, i2c, address):\n        self.i2c = i2c\n        self.address = address\n        self._temp = bytearray(1)\n        self.buffer = bytearray(16)\n        self._write_cmd(_HT16K33_OSCILATOR_ON)\n        self.blink_rate(0)\n        self.brightness(1)\n    def _write_cmd(self, byte):\n        self._temp[0] = byte\n        self.i2c.writeto(self.address, self._temp)\n    def blink_rate(self, rate=None): # 1-3:fast-slow\n        if rate is None:\n            return self._blink_rate\n        rate = rate & 0x03\n        self._blink_rate = rate\n        self._write_cmd(_HT16K33_BLINK_CMD |\n                        _HT16K33_BLINK_DISPLAYON | rate << 1)\n    def brightness(self, brightness):\n        if brightness is None:\n            return self._brightness\n        brightness = brightness & 0x0F\n        self._brightness = brightness\n        self._write_cmd(_HT16K33_CMD_BRIGHTNESS | brightness)\n    def show(self):\n        self.i2c.writeto_mem(self.address, 0x00, self.buffer)\n    def fill(self, color):\n        fill = 0xff if color else 0x00\n        for i in range(16):\n            self.buffer[i] = fill\n    def _pixel(self, x, y, color=None):\n        addr = 2 * y + x // 8\n        mask = 1 << x % 8\n        if color is None:\n            return bool(self.buffer[addr] & mask)\n        if color:\n            self.buffer[addr] |= mask\n        else:\n            self.buffer[addr] &= ~mask\n        return None"],"clear":["window['Blockly'].Python['__LEDBadge_clear'] = function(block) {\n        return `i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\nmatrix.fill(0)\nmatrix1.fill(0)\nmatrix.show()\nmatrix1.show()` + \"\\n\";\n};\n\n","i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\nmatrix.fill(0)\nmatrix1.fill(0)\nmatrix.show()\nmatrix1.show()"],"close":["window['Blockly'].Python['__LEDBadge_close'] = function(block) {\n        return `i2c.deinit()` + \"\\n\";\n};\n\n","i2c.deinit()"],"NORA":["window['Blockly'].Python['__LEDBadge_NORA'] = function(block) {\n        return `i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata1 = [\n  [1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0],\n  [1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,0],\n  [1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data1[y][x]))\n    matrix1._pixel(x,y,int(data1[y][x+16]))\nmatrix.show()\nmatrix1.show()` + \"\\n\";\n};\n\n","i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata1 = [\n  [1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0],\n  [1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,0],\n  [1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n  [1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data1[y][x]))\n    matrix1._pixel(x,y,int(data1[y][x+16]))\nmatrix.show()\nmatrix1.show()"],"GOOD":["window['Blockly'].Python['__LEDBadge_GOOD'] = function(block) {\n        return `i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata = [\n  [0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [1,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data[y][x]))\n    matrix1._pixel(x,y,int(data[y][x+16]))\nmatrix.show()\nmatrix1.show()` + \"\\n\";\n};\n\n","i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata = [\n  [0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [1,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0],\n  [0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data[y][x]))\n    matrix1._pixel(x,y,int(data[y][x+16]))\nmatrix.show()\nmatrix1.show()"],"ONAIR":["window['Blockly'].Python['__LEDBadge_ONAIR'] = function(block) {\n        return `i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata2 = [\n  [0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,1,0],\n  [1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0],\n  [1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data2[y][x]))\n    matrix1._pixel(x,y,int(data2[y][x+16]))\nmatrix.show()\nmatrix1.show()` + \"\\n\";\n};\n\n","i2c = I2C(sda=25, scl=21, freq=100000)\nmatrix = HT16K33(i2c, 0x70)\nmatrix1 = HT16K33(i2c, 0x71)\ndata2 = [\n  [0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,1,0],\n  [1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0],\n  [1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1],\n  [1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n  [0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1],\n]\nfor y in range(8):\n  for x in range(16):\n    matrix._pixel(x,y,int(data2[y][x]))\n    matrix1._pixel(x,y,int(data2[y][x+16]))\nmatrix.show()\nmatrix1.show()"]}}